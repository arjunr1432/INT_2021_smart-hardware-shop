openapi: 3.0.0
info:
  version: 1.0.0
  title: Smart HardWare Shop
servers:
  - url: 'http://localhost:8989/abc-hardware'
tags:
  - name: "Products"
    description: "APIs to operate with Products."
  - name: "News"
    description: "APIs to create and view News details."
  - name: "Shopping"
    description: "APIs to create shopping cart, add/remove products and view order summary."
  - name: "Orders"
    description: "APIs to operate with Products"
paths:
  /products/api/v1/list:
    get:
      summary: 'This API will return the Products list in the catalogue.'
      tags:
        - Products
      parameters:
        - name: searchParam
          in: query
          required: false
          description: 'Custom search param for filtering the product list.'
          example: "drill"
          schema:
            type: string
        - name: pageNo
          in: query
          required: false
          description: 'Page number to choose which page to list, by default the value will be 0.'
          example: 10
          schema:
            type: integer
            format: int64
        - name: pageSize
          in: query
          required: false
          description: 'Page size to choose how many entries to be shown per page, by default the value will be 10.'
          example: 20
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful response: sub list of product catalogue.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCatalogueResponse'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/api/v1/add:
    post:
      summary: 'This API will add a product to the catalogue.'
      tags:
        - Products
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Unique identifier for idempotency
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateProductRequest'
        description: Request payload for adding a new product to our catalogue.
        required: true
      responses:
        '201':
          description: 'Successful response: created product information.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCatalogueResponseData'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/api/v1/update/{productId}:
    put:
      summary: 'This API will update an existing product from the catalogue.'
      tags:
        - Products
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Unique identifier for idempotency
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
        - name: productId
          in: path
          required: true
          description: 'The unique product id in our system, for which we need to update information.'
          example: 10001
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateProductRequest'
        description: Request payload for updating an existing product in our catalogue..
        required: true
      responses:
        '200':
          description: 'Successful response: created product information.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCatalogueResponseData'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/api/v1/delete/{productId}:
    delete:
      summary: 'This API will delete an existing product from the catalogue.'
      tags:
        - Products
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Unique identifier for idempotency
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
        - name: productId
          in: path
          required: true
          description: 'The unique product id in our system, for which we need to delete from our system.'
          example: 10001
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful response: deleted product information.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCatalogueResponseData'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /news/api/v1/list:
    get:
      summary: 'This API will return the Products list in the catalogue.'
      tags:
        - News
      parameters:
        - name: pageNo
          in: query
          required: false
          description: 'Page number to choose which page to list, by default the value will be 0.'
          example: 10
          schema:
            type: integer
            format: int64
        - name: pageSize
          in: query
          required: false
          description: 'Page size to choose how many entries to be shown per page, by default the value will be 10.'
          example: 20
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful response: List of all active newses or offers.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCatalogueResponse'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /news/api/v1/add:
    post:
      summary: 'This API will add a news or product offer to our system.'
      tags:
        - News
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Unique identifier for idempotency
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddNewsRequest'
        description: Request payload for adding a new news or product offer to our system.
        required: true
      responses:
        '201':
          description: 'Successful response: created news information.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCatalogueResponseData'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/api/v1/create:
    post:
      summary: 'This API will create a new shopping cart for the customer to which the products will be added for checkout.'
      tags:
        - Shopping
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Unique identifier for idempotency
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
      responses:
        '201':
          description: 'Successful response: created new shopping cart with unique order id.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartData'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/api/v1/add/{orderId}:
    put:
      summary: 'This API will add a new product to an existing shopping cart.'
      tags:
        - Shopping
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Unique identifier for idempotency
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          description: 'The unique order id in our system, for which we will be adding new product.'
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductRequest'
        description: Request payload for adding a new news or product offer to our system.
        required: true
      responses:
        '200':
          description: 'Successful response: created product information.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartData'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/api/v1/summary/{orderId}:
    get:
      summary: 'This API will show the summary of a shopping cart.'
      tags:
        - Shopping
      parameters:
        - name: orderId
          in: path
          required: true
          example: 49ae0cfe-6b72-4310-81f5-ad4eef897fe3
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response: created product information.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartData'
        default:
          description: Exception scenarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ProductCatalogueResponse:
      type: array
      items:
        $ref: '#/components/schemas/ProductCatalogueResponseData'
    NewsCatalogueResponse:
      type: array
      items:
        $ref: '#/components/schemas/NewsCatalogueResponseData'
    ProductCatalogueResponseData:
      type: object
      required:
        - product_id
        - name
        - description
        - price
      properties:
        product_id:
          type: integer
          format: int64
          description: 'Unique product id in our system.'
          example: 10001
        name:
          type: string
          description: 'Name of the product.'
          example: "Drill bit"
        description:
          type: string
          description: 'Small description of the product.'
          example: "Drill bits with size 2cm."
        price:
          type: string
          description: 'Price of the item. Upto two decimals.'
          example: "100.00"
          pattern: '^[0-9]+\.[0-9]{2}$'
    NewsCatalogueResponseData:
      type: object
      required:
        - news_id
        - title
        - description
        - expiry_date
      properties:
        news_id:
          type: integer
          format: int64
          description: 'Unique news id in our system.'
          example: 10001
        title:
          type: string
          description: 'Title of the news.'
          example: "Big offers on Drill bits"
        description:
          type: string
          description: 'Detailed description about the news.'
          example: "Exiting offers on all sizes of drill bits."
        expiry_date:
          type: string
          format: date-time
          description: 'The expiry date of the news.'
          example: "1985-04-12T23:20:50.52Z"
    ShoppingCartData:
      type: object
      required:
        - order_id
        - items
        - created_date
        - total_price
      properties:
        order_id:
          type: string
          description: 'Unique order id in our system.'
          example: order-asdasd-1312-adasd
        items:
          type: array
          description: 'List of items chosen in the order.'
          items:
            $ref: '#/components/schemas/ProductItemData'
        created_date:
          type: string
          format: date-time
          description: 'The date on which the order has created.'
          example: "1985-04-12T23:20:50.52Z"
        total_price:
          type: string
          description: 'Price of the item. Upto two decimals.'
          example: "100.00"
          pattern: '^[0-9]+\.[0-9]{2}$'
    ProductItemData:
      type: object
      required:
        - product_id
        - name
        - count
        - price
        - total_item_price
      properties:
        product_id:
          type: integer
          format: int64
          description: 'Unique product id in our system.'
          example: 10001
        name:
          type: string
          description: 'Name of the product.'
          example: "Drill bit"
        price:
          type: string
          description: 'Price of the item. Upto two decimals.'
          example: "100.00"
          pattern: '^[0-9]+\.[0-9]{2}$'
        count:
          type: integer
          format: int64
          description: 'No of items chosen in the order.'
          example: 10001
        total_item_price:
          type: string
          description: 'Price of the total items chosen. Upto two decimals.'
          example: "100.00"
          pattern: '^[0-9]+\.[0-9]{2}$'
    CreateOrUpdateProductRequest:
      type: object
      required:
        - name
        - description
        - price
        - inventory
      properties:
        name:
          type: string
          description: 'Name of the product.'
          example: "Drill bit"
        description:
          type: string
          description: 'Small description of the product.'
          example: "Drill bit size 10cm."
        price:
          type: string
          description: 'Price of the item. Upto two decimals.'
          example: "100.00"
          pattern: '^[0-9]+\.[0-9]{2}$'
    AddNewsRequest:
      type: object
      required:
        - title
        - description
        - expiry_date
      properties:
        title:
          type: string
          description: 'Title of the news.'
          example: "Offers on drill bits"
        description:
          type: string
          description: 'Detailed description about the news.'
          example: "Exiting offers on latest model drill bits."
        expiry_date:
          type: string
          format: date-time
          description: 'The expiry date of the news or product offer.'
          example: "1985-04-12T23:20:50.52Z"
    AddProductRequest:
      type: object
      required:
        - product_id
      properties:
        product_id:
          type: integer
          format: int64
          description: 'The product id of the product which we want to add to the order.'
          example: 10001
        count:
          type: integer
          format: int64
          description: 'An optional field to add more than one product at a time.'
          example: 5
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
security:
  - BasicAuth: []